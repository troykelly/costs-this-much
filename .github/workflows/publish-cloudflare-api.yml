name: "Publish Cloudflare API & Logger Worker"

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  deploy:
    name: "Deploy Cloudflare API & Logger Worker"
    runs-on: ubuntu-latest

    steps:
      ##########################################################################
      # 1) Check out the repository
      ##########################################################################
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node (if needed)
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          check-latest: true

      - name: Prepare Yarn environment
        run: |
          corepack enable
          yarn set version stable
          yarn config set nodeLinker node-modules
          yarn config set enableGlobalCache true
          yarn config set enableImmutableInstalls true

      ##########################################################################
      # 2) Verify if the Worker exists. If not, create it with Wrangler.
      #
      #    We use "actions/github-script" + X-Auth-Key approach to check existence
      #    (HTTP GET). If not found, we run "wrangler publish" from this same script
      #    to create the Worker. This satisfies:
      #      1. Ensure the worker (`CLOUDFLARE_SERVICE_NAME-api`) is created.
      #      2. If it is not - create it.
      ##########################################################################
      - name: Verify or Create CF Worker Service
        id: verify-worker
        uses: actions/github-script@v6
        with:
          script: |
            const email = process.env.CLOUDFLARE_EMAIL;
            const apiKey = process.env.CLOUDFLARE_API_KEY;
            const accountId = process.env.CLOUDFLARE_ACCOUNT_ID;
            const workerName = `${process.env.CLOUDFLARE_SERVICE_NAME}-api`;

            if (!email || !apiKey || !accountId) {
                throw new Error("Missing CLOUDFLARE_EMAIL, CLOUDFLARE_API_KEY, or CLOUDFLARE_ACCOUNT_ID in environment.");
            }
            if (!process.env.CLOUDFLARE_SERVICE_NAME) {
                throw new Error("Missing CLOUDFLARE_SERVICE_NAME in environment variables.");
            }

            const baseUrl = `https://api.cloudflare.com/client/v4/accounts/${accountId}`;
            async function cfApiRequest(path, method = 'GET') {
                const url = `${baseUrl}${path}`;
                const headers = {
                    'X-Auth-Email': email,
                    'X-Auth-Key': apiKey,
                    'Content-Type': 'application/json'
                };
                const resp = await fetch(url, { method, headers });
                return { ok: resp.ok, status: resp.status, data: await resp.json() };
            }

            const checkPath = `/workers/services/${encodeURIComponent(workerName)}`;
            const result = await cfApiRequest(checkPath, 'GET');

            if (!result.ok && result.status === 404) {
                console.log(`Worker service '${workerName}' not found. Creating with Wrangler...`);

                const execSync = require('child_process').execSync;
                try {
                    execSync(`yarn dlx wrangler deploy --config=workers/aemo-data-logger/wrangler.api.toml --name=${workerName} --upload-source-maps`, { stdio: 'inherit' });
                    console.log(`Created Worker '${workerName}' via Wrangler deploy.`);
                } catch (err) {
                    throw new Error(`Failed to create Worker service '${workerName}' via Wrangler.\nError: ${err.message}`);
                }
            } else if (!result.ok) {
                console.log(`Got status=${result.status} from Cloudflare. Data:\n`, JSON.stringify(result.data, null, 2));
                throw new Error(`Failed to verify Worker service '${workerName}'.`);
            } else {
                console.log(`Worker service '${workerName}' already exists.`);
            }
            core.setOutput("done", "true");
        env:
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_SERVICE_NAME: ${{ vars.CLOUDFLARE_SERVICE_NAME }}

      ##########################################################################
      # 3) Ensure the custom domain ("api.CLOUDFLARE_DOMAIN_NAME") is pointed
      #    at the Worker using a valid zone_id lookup and then a PUT domain request.
      ##########################################################################
      # - name: Verify or Attach Domain
      #   id: verify-domain
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const email = process.env.CLOUDFLARE_EMAIL;
      #       const apiKey = process.env.CLOUDFLARE_API_KEY;
      #       const accountId = process.env.CLOUDFLARE_ACCOUNT_ID;
      #       const workerName = `${process.env.CLOUDFLARE_SERVICE_NAME}-api`;
      #       const domainToAttach = `api.${process.env.CLOUDFLARE_DOMAIN_NAME}`;

      #       if (!email || !apiKey || !accountId) {
      #           throw new Error("Missing CLOUDFLARE_EMAIL, CLOUDFLARE_API_KEY, or CLOUDFLARE_ACCOUNT_ID.");
      #       }
      #       if (!process.env.CLOUDFLARE_SERVICE_NAME || !process.env.CLOUDFLARE_DOMAIN_NAME) {
      #           throw new Error("Missing CLOUDFLARE_SERVICE_NAME or CLOUDFLARE_DOMAIN_NAME in environment.");
      #       }

      #       const baseUrl = `https://api.cloudflare.com/client/v4/accounts/${accountId}`;

      #       /**
      #       * Generic API request helper.
      #       */
      #       async function cfApiRequest(path, method = 'GET', body = null) {
      #           const url = `${baseUrl}${path}`;
      #           const headers = {
      #               'X-Auth-Email': email,
      #               'X-Auth-Key': apiKey,
      #               'Content-Type': 'application/json'
      #           };
      #           const opts = { method, headers };
      #           if (body) {
      #               opts.body = JSON.stringify(body);
      #           }
      #           const resp = await fetch(url, opts);
      #           return { ok: resp.ok, status: resp.status, data: await resp.json() };
      #       }

      #       /**
      #       * Fetch all zones by paging (in case there are more than 20).
      #       * Returns an array of zone objects.
      #       */
      #       async function fetchAllZones() {
      #           let page = 1;
      #           const perPage = 50;
      #           let allZones = [];

      #           while (true) {
      #               const resp = await cfApiRequest(`/zones?page=${page}&per_page=${perPage}`, 'GET');
      #               if (!resp.ok) {
      #                   throw new Error(`Failed to list zones (page=${page}). Status=${resp.status}`);
      #               }
      #               const result = resp.data?.result || [];
      #               allZones = allZones.concat(result);

      #               const info = resp.data?.result_info;
      #               if (!info) break;
      #               if (info.page >= info.total_pages) break;
      #               page++;
      #           }
      #           return allZones;
      #       }

      #       // 1) Retrieve all zones from the account, then find the zone matching CLOUDFLARE_DOMAIN_NAME
      #       const domainName = process.env.CLOUDFLARE_DOMAIN_NAME;
      #       const allZones = await fetchAllZones();
      #       const matchingZone = allZones.find((z) => z.name === domainName);

      #       if (!matchingZone) {
      #           console.log("Available zones from Cloudflare:");
      #           allZones.forEach(z => console.log(`â€¢ Zone= '${z.name}', zone_id='${z.id}'`));
      #           throw new Error(`No matching zone found for domain '${domainName}'.`);
      #       }
      #       const zoneId = matchingZone.id || "";
      #       console.log(`Using zone_id='${zoneId}' for domain '${domainName}'.`);

      #       // 2) Check existing domain attachments
      #       const listDomainsPath = `/workers/domains?service=${encodeURIComponent(workerName)}&environment=api`;
      #       const listResp = await cfApiRequest(listDomainsPath, 'GET');
      #       if (!listResp.ok && listResp.status !== 404) {
      #           console.log(`Unable to list domains. status=${listResp.status}, data:\n`, JSON.stringify(listResp.data, null, 2));
      #           throw new Error(`Cannot verify domain attachments for '${workerName}'`);
      #       }
      #       const domainArr = listResp.data?.result;
      #       if (!Array.isArray(domainArr)) {
      #           console.log("Missing or invalid 'result' in domain listing. Data:\n", JSON.stringify(listResp.data, null, 2));
      #           throw new Error("Cannot parse domain listing from Cloudflare response.");
      #       }

      #       // 3) Attach domain if not already attached
      #       const alreadyAttached = domainArr.some((d) => d.hostname === domainToAttach);
      #       if (!alreadyAttached) {
      #           console.log(`Domain '${domainToAttach}' not attached to worker '${workerName}'. Attaching now...`);

      #           const attachReqBody = {
      #               environment: "api",
      #               hostname: domainToAttach,
      #               service: workerName,
      #               zone_id: zoneId
      #           };

      #           const attachResp = await cfApiRequest("/workers/domains", "PUT", attachReqBody);
      #           if (!attachResp.ok) {
      #               console.log("Failed to attach domain. Response:\n", JSON.stringify(attachResp.data, null, 2));
      #               throw new Error(`Failed to attach domain '${domainToAttach}' to Worker '${workerName}'.`);
      #           }
      #           console.log(`Domain '${domainToAttach}' successfully attached to worker '${workerName}'.`);
      #       } else {
      #           console.log(`Domain '${domainToAttach}' is already attached to worker '${workerName}'.`);
      #       }

      #       core.setOutput("done", "true");
      #   env:
      #     CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
      #     CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
      #     CLOUDFLARE_DOMAIN_NAME: ${{ vars.CLOUDFLARE_DOMAIN_NAME }}
      #     CLOUDFLARE_SERVICE_NAME: ${{ vars.CLOUDFLARE_SERVICE_NAME }}
      #     CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      ##########################################################################
      # 5) Ensure environment variables (LOG_LEVEL, AEMO_API_URL, etc.) are set.
      #    We'll do this with `wrangler var set` commands in preCommands, but
      #    we can run `publish` at the end as well. The step ensures:
      #      5. Ensure the variables: LOG_LEVEL, AEMO_API_URL, AEMO_API_HEADERS,
      #         RATE_LIMIT_MAX, RATE_LIMIT_WINDOW_SEC are correctly set.
      ##########################################################################
      - name: Ensure Env Vars
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          preCommands: |
            echo "$SIGNING_KEYS" | yarn dlx wrangler secret put SIGNING_KEYS --config=workers/aemo-data-logger/wrangler.api.toml --name=${{ vars.CLOUDFLARE_SERVICE_NAME }}-api
            echo "$CLIENT_IDS" | yarn dlx wrangler secret put CLIENT_IDS --config=workers/aemo-data-logger/wrangler.api.toml --name=${{ vars.CLOUDFLARE_SERVICE_NAME }}-api
          command: whoami
        env:
          SIGNING_KEYS: ${{ secrets.API_SIGNING_KEYS }}
          CLIENT_IDS: ${{ vars.API_CLIENT_IDS }}

      ##########################################################################
      # 6) Deploy the API to Production using Wrangler.
      #    This final step publishes the Worker with the updated settings.
      ##########################################################################
      - name: Final Deploy to Production
        run: |
          yarn dlx wrangler --config=workers/aemo-data-logger/wrangler.api.toml \
          --name=${{ vars.CLOUDFLARE_SERVICE_NAME }}-api \
          --upload-source-maps \
          --var LOG_LEVEL=${{ vars.API_LOG_LEVEL }} \
          --var AEMO_API_URL=${{ vars.AEMO_API_URL }} \
          --var AEMO_API_HEADERS=${{ vars.AEMO_API_HEADERS }} \
          --var RATE_LIMIT_MAX=${{ vars.API_RATE_LIMIT_MAX }} \
          --var RATE_LIMIT_WINDOW_SEC=${{ vars.API_RATE_LIMIT_WINDOW_SEC }}
        env:
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_SERVICE_NAME: ${{ vars.CLOUDFLARE_SERVICE_NAME }}
