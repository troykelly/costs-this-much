name: "Cloudflare Pages Publish"

###############################################################################
# This workflow supports two publishing modes:
# 1) Manual trigger from any branch (workflow_dispatch).
#    - Publishes from the branch/tag specified in the dispatch.
# 2) Automatic trigger on push to the "publish" branch or when pushing a tag matching "v*".
#    - Publishes from that branch or tag.
###############################################################################

on:
  workflow_dispatch:
  push:
    branches:
      - 'publish'
    tags:
      - 'v*'

jobs:
  publish:
    name: "Publish to Cloudflare Pages"
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          # If triggered by workflow_dispatch with a custom ref, override it here if needed.
          # Otherwise, will default to the branch or tag that triggered the workflow.
          ref: ${{ github.ref }}

      # Wrangler is already provided by the wrangler-action, but we do need 'jq' if we
      # plan to parse JSON for domain checks below.
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check or create Cloudflare Pages service
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          preCommands: |
            echo "Checking if Pages service '${{ vars.CLOUDFLARE_SERVICE_NAME }}' exists"
            if ! wrangler pages project list --json | jq -e '.[] | select(.name == "'${{ vars.CLOUDFLARE_SERVICE_NAME }}'")' > /dev/null; then
              echo "Service ${{ vars.CLOUDFLARE_SERVICE_NAME }} not found - creating..."
              wrangler pages project create --project-name="${{ vars.CLOUDFLARE_SERVICE_NAME }}"
            else
              echo "Service ${{ vars.CLOUDFLARE_SERVICE_NAME }} already exists"
            fi

            # Check or create custom domain entries (including wildcard)
            echo "Ensuring domain '${{ vars.CLOUDFLARE_DOMAIN_NAME }}' is attached"
            domainExists=$(curl -s -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/${{ vars.CLOUDFLARE_SERVICE_NAME }}/domains" \
              | jq -r '.result[]?.domain' | grep -xc "${{ vars.CLOUDFLARE_DOMAIN_NAME }}" || true)
            if [ "$domainExists" -eq 0 ]; then
              echo "Domain ${{ vars.CLOUDFLARE_DOMAIN_NAME }} not found. Adding..."
              curl -X POST -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                   -H "Content-Type: application/json" \
                   "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/${{ vars.CLOUDFLARE_SERVICE_NAME }}/domains" \
                   --data "{\"domain\": \"${{ vars.CLOUDFLARE_DOMAIN_NAME }}\"}"
            else
              echo "Domain ${{ vars.CLOUDFLARE_DOMAIN_NAME }} is already configured."
            fi

            echo "Ensuring wildcard domain '*.${{ vars.CLOUDFLARE_DOMAIN_NAME }}' is attached"
            wildcardExists=$(curl -s -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/${{ vars.CLOUDFLARE_SERVICE_NAME }}/domains" \
              | jq -r '.result[]?.domain' | grep -xc "*.${{ vars.CLOUDFLARE_DOMAIN_NAME }}" || true)
            if [ "$wildcardExists" -eq 0 ]; then
              echo "Wildcard domain '*.${{ vars.CLOUDFLARE_DOMAIN_NAME }}' not found. Adding..."
              curl -X POST -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                   -H "Content-Type: application/json" \
                   "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/${{ vars.CLOUDFLARE_SERVICE_NAME }}/domains" \
                   --data "{\"domain\": \"*.${{ vars.CLOUDFLARE_DOMAIN_NAME }}\"}"
            else
              echo "Wildcard domain '*.${{ vars.CLOUDFLARE_DOMAIN_NAME }}' is already configured."
            fi
          command: echo "Finished checking/creating service and domain setup."

      - name: Install project dependencies
        run: yarn install --immutable

      - name: Build frontend
        run: yarn workspace frontend build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./frontend/dist --project-name=${{ vars.CLOUDFLARE_SERVICE_NAME }}