name: "Cloudflare Pages Publish"

################################################################################
# This workflow supports two publishing modes:
#
# 1) Manual trigger (workflow_dispatch) from any branch or tag.
#    - Publishes from the specified ref (branch or tag).
#
# 2) Automatic trigger on push to:
#    - The "publish" branch
#    - Any tag matching "v*"
#
# It uses GitHub Actions Variables (vars.*) for the Cloudflare service/project
# name and domain name (configured in your repository settings),
# and GitHub Secrets for Cloudflare tokens.
#
# All Cloudflare API interactions are performed using the GitHub Script Action,
# so we avoid complex shell scripting. Wrangler (through cloudflare/wrangler-action)
# is used only to deploy the built files to Cloudflare Pages.
#
# This file has been updated to align with the devcontainer approach to Yarn,
# ensuring the "current version" is correctly set before installing dependencies.
################################################################################

on:
  workflow_dispatch:
  push:
    branches:
      - "publish"
    tags:
      - "v*"

jobs:
  publish:
    name: "Publish to Cloudflare Pages"
    runs-on: ubuntu-latest

    steps:
      ############################################################################
      # 1) Check out this repository
      ############################################################################
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          # If triggered by workflow_dispatch with a custom ref,
          # one can specify that in the dispatch form. Otherwise it
          # defaults to the commit/branch/ref that triggered the workflow.
          ref: ${{ github.ref }}

      ############################################################################
      # 2) Prepare Yarn environment & install dependencies
      #
      #    We replicate the approach used in the devcontainer so that
      #    Yarn is the correct "current" version, ensuring "yarn install" works.
      ############################################################################
      - name: Prepare Yarn & install dependencies
        run: |
          corepack enable
          yarn set version stable
          # The following or similar settings may be used if you require them:
          yarn config set nodeLinker node-modules
          yarn config set enableGlobalCache true
          yarn config set enableImmutableInstalls true
          yarn install --immutable

      ############################################################################
      # 3) Build the frontend
      ############################################################################
      - name: Build frontend
        run: yarn workspace frontend build

      ############################################################################
      # 4) Use GitHub Script for Cloudflare API calls to:
      #    - Ensure the Pages project (vars.CLOUDFLARE_SERVICE_NAME) exists
      #    - Ensure the domain (vars.CLOUDFLARE_DOMAIN_NAME) is attached
      #    - Ensure the wildcard domain (*.<vars.CLOUDFLARE_DOMAIN_NAME>) is attached
      ############################################################################
      - name: Configure Cloudflare Pages project & domains
        uses: actions/github-script@v6
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_SERVICE_NAME: ${{ vars.CLOUDFLARE_SERVICE_NAME }}
          CLOUDFLARE_DOMAIN_NAME: ${{ vars.CLOUDFLARE_DOMAIN_NAME }}
        with:
          script: |
            const CF_API_TOKEN      = process.env.CLOUDFLARE_API_TOKEN;
            const CF_ACCOUNT_ID     = process.env.CLOUDFLARE_ACCOUNT_ID;
            const CF_SERVICE_NAME   = process.env.CLOUDFLARE_SERVICE_NAME;
            const CF_DOMAIN_NAME    = process.env.CLOUDFLARE_DOMAIN_NAME;

            if (!CF_API_TOKEN || !CF_ACCOUNT_ID || !CF_SERVICE_NAME || !CF_DOMAIN_NAME) {
              throw new Error("Missing Cloudflare environment variables. Ensure 'vars' and 'secrets' are set.");
            }

            /**
             * Helper: Make a Cloudflare API request.
             * @param {string} subPath - appended to /accounts/<id>.
             * @param {string} method - GET, POST, PATCH, DELETE, etc.
             * @param {object|null} body - JSON body for POST/PUT, if needed.
             * @returns {Promise<any>} The parsed JSON response.
             */
            async function cfApiRequest(subPath, method = "GET", body = null) {
              const url = `https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}${subPath}`;
              const headers = {
                "Authorization": `Bearer ${CF_API_TOKEN}`,
                "Content-Type": "application/json",
              };
              const opts = { method, headers };

              if (body) {
                opts.body = JSON.stringify(body);
              }

              const resp = await fetch(url, opts);
              if (!resp.ok) {
                const msg = await resp.text();
                throw new Error(`Cloudflare API request failed with status ${resp.status}: ${msg}`);
              }
              return resp.json();
            }

            /**
             * Ensures a Pages project with name CF_SERVICE_NAME exists,
             * creating it if needed.
             */
            async function ensurePagesProject() {
              const data = await cfApiRequest("/pages/projects");
              const existingProjects = data.result || [];
              const found = existingProjects.some(prj => prj.name === CF_SERVICE_NAME);

              if (!found) {
                console.log(`Pages project "${CF_SERVICE_NAME}" not found. Creating...`);
                await cfApiRequest("/pages/projects", "POST", { name: CF_SERVICE_NAME });
                console.log(`Created Pages project "${CF_SERVICE_NAME}" successfully.`);
              } else {
                console.log(`Pages project "${CF_SERVICE_NAME}" already exists.`);
              }
            }

            /**
             * Ensures a specific domain is attached to the Pages project.
             * @param {string} domain - The domain to check or attach (e.g., "example.com").
             */
            async function ensureDomain(domain) {
              const path = `/pages/projects/${CF_SERVICE_NAME}/domains`;
              const data = await cfApiRequest(path, "GET");
              const attachedDomains = data.result || [];
              const alreadyAttached = attachedDomains.some(d => d.domain === domain);

              if (!alreadyAttached) {
                console.log(`Domain "${domain}" not attached. Adding...`);
                await cfApiRequest(path, "POST", { domain });
                console.log(`Attached domain "${domain}".`);
              } else {
                console.log(`Domain "${domain}" is already attached.`);
              }
            }

            // Main logic:
            console.log(`Ensuring Pages project and domains for "${CF_SERVICE_NAME}"...`);

            // 1) Ensure Pages Project
            await ensurePagesProject();

            // 2) Ensure main domain
            await ensureDomain(CF_DOMAIN_NAME);

            // 3) Ensure wildcard domain
            await ensureDomain(`*.${CF_DOMAIN_NAME}`);

            console.log("Cloudflare Pages configuration complete.");

      ############################################################################
      # 5) Deploy to Cloudflare Pages using Wrangler
      ############################################################################
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./frontend/dist --project-name=${{ vars.CLOUDFLARE_SERVICE_NAME }}
