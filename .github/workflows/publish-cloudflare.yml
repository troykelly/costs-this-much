name: "Cloudflare Pages Publish"

################################################################################
# This workflow demonstrates a refactored approach, ensuring:
#   1. All Cloudflare configuration (Pages project and domain attachments) happen
#      before any build steps, so you do not spend time building if CF config fails.
#   2. GitHub Script is used for all Cloudflare API interactions—no inline shell scripts
#      or jq usage. Wrangler is only used to deploy.
#   3. Yarn usage follows the devcontainer approach to ensure the "current" Yarn
#      version is respected. No sudo or apt operations are required.
#   4. We do not hard-code Cloudflare project/domain values. Instead,
#      we read them from GitHub Action Variables (vars.*) and Secrets (CLOUDFLARE_*).
#
# This workflow supports two publishing modes:
#   - Manual trigger (workflow_dispatch) from any branch or tag.
#   - Automatic trigger on push:
#       • to branch "publish"
#       • or any tag matching "v*"
################################################################################

on:
  workflow_dispatch:
  push:
    branches:
      - "publish"
    tags:
      - "v*"

jobs:
  publish:
    name: "Publish to Cloudflare Pages"
    runs-on: ubuntu-latest

    steps:
      ############################################################################
      # 1) Check out the repository and ensure Node + Yarn environment is ready
      ############################################################################
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node (if needed)
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          check-latest: true

      - name: Prepare Yarn environment
        run: |
          corepack enable
          yarn set version stable
          yarn config set nodeLinker node-modules
          yarn config set enableGlobalCache true
          yarn config set enableImmutableInstalls true

      ############################################################################
      # 2) Confirm Cloudflare Pages project and domain(s) are configured via
      #    GitHub Script calls to the Cloudflare API. If this fails, we skip build.
      ############################################################################
      # - name: Configure Cloudflare Pages (API checks)
      #   uses: actions/github-script@v6
      #   env:
      #     CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #     CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      #     CLOUDFLARE_SERVICE_NAME: ${{ vars.CLOUDFLARE_SERVICE_NAME }}
      #     CLOUDFLARE_DOMAIN_NAME: ${{ vars.CLOUDFLARE_DOMAIN_NAME }}
      #   with:
      #     script: |
      #       const cfApiToken    = process.env.CLOUDFLARE_API_TOKEN;
      #       const cfAccountId   = process.env.CLOUDFLARE_ACCOUNT_ID;
      #       const cfServiceName = process.env.CLOUDFLARE_SERVICE_NAME;
      #       const cfDomainName  = process.env.CLOUDFLARE_DOMAIN_NAME;
      #
      #       if (!cfApiToken || !cfAccountId || !cfServiceName || !cfDomainName) {
      #         throw new Error("Missing CLOUDFLARE_* environment variables/secrets.");
      #       }
      #
      #       async function cfApiRequest(path, method = "GET", body = null) {
      #         const url = `https://api.cloudflare.com/client/v4/accounts/${cfAccountId}${path}`;
      #         const headers = {
      #           "Authorization": `Bearer ${cfApiToken}`,
      #           "Content-Type": "application/json"
      #         };
      #         const opts = { method, headers };
      #         if (body) {
      #           opts.body = JSON.stringify(body);
      #         }
      #         const response = await fetch(url, opts);
      #         if (!response.ok) {
      #           const text = await response.text();
      #           throw new Error(`Cloudflare API error [${response.status}]: ${text}`);
      #         }
      #         return response.json();
      #       }
      #
      #       // 1) Ensure Pages Project
      #       async function ensurePagesProject() {
      #         const result = await cfApiRequest("/pages/projects");
      #         const existing = result?.result || [];
      #         const found = existing.some(prj => prj.name === cfServiceName);
      #         if (!found) {
      #           console.log(`Project '${cfServiceName}' not found. Creating...`);
      #           await cfApiRequest("/pages/projects", "POST", { name: cfServiceName, production_branch: "main" });
      #           console.log(`Created Pages project '${cfServiceName}'.`);
      #         } else {
      #           console.log(`Project '${cfServiceName}' already exists.`);
      #         }
      #       }
      #
      #       // 2) Ensure domain is attached
      #       async function ensureDomain(domain) {
      #         console.log(`Ensuring domain '${domain}' is attached...`);
      #         const path = `/pages/projects/${cfServiceName}/domains`;
      #         const list = await cfApiRequest(path, "GET");
      #         const attached = list?.result || [];
      #         const isFound = attached.some(d => d.domain === domain);
      #         if (!isFound) {
      #           console.log(`Domain '${domain}' not found. Attaching...`);
      #           await cfApiRequest(path, "POST", { domain });
      #           console.log(`Domain '${domain}' attached.`);
      #         } else {
      #           console.log(`Domain '${domain}' is already attached.`);
      #         }
      #       }
      #
      #       // Execute checks
      #       await ensurePagesProject();
      #       await ensureDomain(cfDomainName);
      #       await ensureDomain(`*.${cfDomainName}`);
      #       console.log("Cloudflare Pages config verification complete.");

      ############################################################################
      # 3) Install dependencies, then build the frontend (only if CF project config
      #    succeeded above). If the above fails, we won't continue.
      ############################################################################
      - name: Install project dependencies
        run: yarn install --immutable

      - name: Generate environment variables
        id: derive-env
        run: |
          # We'll parse the first item from the array in API_CLIENT_IDS
          # and set up the base URL for the API
          echo "VITE_APP_CLIENT_ID=$(echo '${{ vars.API_CLIENT_IDS }}' | jq -r '.[0]')" >> $GITHUB_ENV
          echo "VITE_API_URL=https://api.${{ vars.CLOUDFLARE_DOMAIN_NAME }}" >> $GITHUB_ENV
          echo "VITE_APP_URL=https://${{ vars.CLOUDFLARE_DOMAIN_NAME }}" >> $GITHUB_ENV

      - name: Build frontend
        run: yarn workspace frontend build
        env:
          VITE_APP_CLIENT_ID: ${{ env.VITE_APP_CLIENT_ID }}
          VITE_API_URL: ${{ env.VITE_API_URL }}
          VITE_APP_URL: ${{ env.VITE_APP_URL }}

      ############################################################################
      # 4) Deploy to Cloudflare Pages using Wrangler
      ############################################################################
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./frontend/dist --project-name=${{ vars.CLOUDFLARE_SERVICE_NAME }} --branch=main --commit-dirty=true
