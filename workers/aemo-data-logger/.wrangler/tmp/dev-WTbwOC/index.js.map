{
  "version": 3,
  "sources": ["../../../src/AemoDataDurableObject.ts", "../../../src/index.ts", "../../../../../../../usr/local/share/npm-global/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../usr/local/share/npm-global/lib/node_modules/wrangler/templates/middleware/middleware-scheduled.ts", "../../../../../../../usr/local/share/npm-global/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-NpG2Z4/middleware-insertion-facade.js", "../../../../../../../usr/local/share/npm-global/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-NpG2Z4/middleware-loader.entry.ts"],
  "sourceRoot": "/workspaces/costs-this-much/workers/aemo-data-logger/.wrangler/tmp/dev-WTbwOC",
  "sourcesContent": ["/**\n * @fileoverview Durable Object that stores AEMO intervals in a Cloudflare SQL-based backend.\n *\n * This version aligns with Cloudflare\u2019s documented approach to Durable Object SQL storage:\n *   \u2022 Uses \"transaction()\" from DurableObjectStorage instead of any ad-hoc or synchronous types.\n *   \u2022 Strictly types all fields. \n *   \u2022 Checks for availability of \"sql\" before executing queries.\n *   \u2022 Creates/ensures the \"intervals\" table, then inserts records in a single transaction.\n */\n\nimport type {\n  DurableObjectState,\n  DurableObjectStorage,\n  SqlStorage,\n} from '@cloudflare/workers-types';\n\n/**\n * Environment variables used by the AemoData Durable Object.\n */\nexport interface AemoDataEnv {\n  /**\n   * AEMO API endpoint for 5-minute data. The DO issues a POST request here with\n   * a body of { timeScale: [\"5MIN\"] }.\n   */\n  AEMO_API_URL: string;\n\n  /**\n   * JSON-formatted string of request headers for the AEMO API calls.\n   * For example: \"{ \\\"Accept\\\": \\\"application/json\\\" }\".\n   */\n  AEMO_API_HEADERS: string;\n}\n\n/**\n * Interface representing the shape of an AEMO data interval record.\n */\nexport interface AemoInterval {\n  /** Settlement date/time for the interval (e.g., \"2025-03-18T00:10:00Z\"). */\n  settlementdate: string;\n  /** The region identifier (e.g., \"NSW1\"). */\n  regionid: string;\n  /** Regional Reference Price, stored as a float. */\n  rrp: number;\n}\n\n/**\n * Interface describing rows in the \"intervals\" table.\n */\nexport interface IntervalRecord {\n  /**\n   * The settlement date/time for the record, stored as TEXT, so we allow null\n   * if the row is incomplete for any reason.\n   */\n  settlementdate: string | null;\n  /**\n   * The region ID for this record, also TEXT in the DB, so may be null.\n   */\n  regionid: string | null;\n  /**\n   * The numeric RRP field, stored as NUMERIC in the DB, so may be null.\n   */\n  rrp: number | null;\n}\n\n/**\n * Shape of the AEMO API response for 5-minute intervals.\n */\nexport interface AemoApiResponse {\n  \"5MIN\": Array<{\n    SETTLEMENTDATE: string;\n    REGIONID: string;\n    RRP: string | number;\n  }>;\n}\n\n/**\n * Durable Object for AEMO data ingestion and local storage in an internal SQLite table.\n */\nexport class AemoData {\n  private readonly state: DurableObjectState;\n  private readonly env: AemoDataEnv;\n\n  /**\n   * @param state - DO state object, providing SQL storage and transactions.\n   * @param env   - Typed environment bindings for AEMO data (URL, headers, etc.).\n   */\n  constructor(state: DurableObjectState, env: AemoDataEnv) {\n    this.state = state;\n    this.env = env;\n  }\n\n  /**\n   * Standard fetch handler for this DO. Only responds to POST /sync to ingest data.\n   */\n  async fetch(request: Request): Promise<Response> {\n    const url = new URL(request.url);\n    if (url.pathname === '/sync' && request.method === 'POST') {\n      return this.handleSync();\n    }\n    return new Response(\"Not found\", { status: 404 });\n  }\n\n  /**\n   * Sync ingestion routine:\n   * 1) POST { timeScale: [\"5MIN\"] } to AEMO_API_URL.\n   * 2) Parse expected data from the \"5MIN\" property of response.\n   * 3) CREATE TABLE IF NOT EXISTS intervals(...) if needed.\n   * 4) INSERT OR IGNORE intervals to avoid duplicates.\n   * 5) Return a summary message about how many intervals were inserted.\n   *\n   * Uses the documented \"transaction\" approach from Cloudflare for SQL statements.\n   */\n  private async handleSync(): Promise<Response> {\n    try {\n      // Check that the \"sql\" property is available\n      const sql: SqlStorage | undefined = this.state.storage.sql;\n      if (!sql) {\n        console.error(\"SQL storage not available. Check DO configuration/migrations.\");\n        return new Response(\"Sync failed: SQL storage not bound.\", { status: 500 });\n      }\n\n      // Prepare the outbound request\n      const { AEMO_API_URL, AEMO_API_HEADERS } = this.env;\n      const parsedHeaders: Record<string, string> =\n        AEMO_API_HEADERS.trim() ? JSON.parse(AEMO_API_HEADERS) : {};\n      const requestBody = { timeScale: ['5MIN'] };\n\n      const response = await fetch(AEMO_API_URL, {\n        method: 'POST',\n        headers: {\n          ...parsedHeaders,\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n      if (!response.ok) {\n        const errText = await response.text();\n        console.error(`AEMO API error ${response.status}: ${errText}`);\n        return new Response(`Sync failed: AEMO API ${response.status} - ${errText}`, { status: 500 });\n      }\n\n      // Parse the response JSON for 5MIN array\n      const apiJson = (await response.json()) as AemoApiResponse;\n      const rawData = apiJson[\"5MIN\"];\n      if (!Array.isArray(rawData)) {\n        console.error(\"Response missing '5MIN' array property.\");\n        return new Response(\"Sync failed: '5MIN' field is invalid or missing.\", { status: 500 });\n      }\n\n      // Convert the raw data to typed intervals\n      const intervals: AemoInterval[] = rawData.map((item) => ({\n        settlementdate: item.SETTLEMENTDATE,\n        regionid: item.REGIONID,\n        rrp: parseFloat(String(item.RRP)),\n      }));\n\n      // Create or ensure the table\n      sql.exec(`\n        CREATE TABLE IF NOT EXISTS intervals (\n          settlementdate TEXT PRIMARY KEY,\n          regionid TEXT,\n          rrp NUMERIC\n        );\n      `);\n\n      let insertedCount = 0;\n\n      // Run an async transaction to batch inserts using INSERT OR IGNORE\n      await this.state.storage.transaction(async (txnStorage: DurableObjectStorage) => {\n        // Each statement is run through txnStorage.sql\n        const txnSql = txnStorage.sql;\n        if (!txnSql) {\n          console.error(\"SQL not available inside transaction callback.\");\n          return;\n        }\n        for (const interval of intervals) {\n          const cursor = txnSql.exec<IntervalRecord>(\n            `INSERT OR IGNORE INTO intervals (settlementdate, regionid, rrp) VALUES (?, ?, ?)`,\n            interval.settlementdate,\n            interval.regionid,\n            interval.rrp,\n          );\n          insertedCount += cursor.rowsWritten;\n        }\n      });\n\n      const summary = `Sync successful: retrieved ${intervals.length} intervals; inserted ${insertedCount} new.`;\n      console.log(summary);\n      return new Response(summary, { status: 200 });\n\n    } catch (err) {\n      console.error(\"Sync error:\", err);\n      return new Response(\n        \"Sync failed: \" + (err as Error).message,\n        { status: 500 },\n      );\n    }\n  }\n}", "/**\n * @fileoverview Entry point for the AEMO data logger Worker.\n *\n * Schedules every 5 minutes offset by 1 minute to fetch missing intervals from the AEMO API and\n * store them in a SQL-based Durable Object. Adheres to Cloudflare's documented approach for\n * using DO + SQL.\n */\n\nimport type {\n  DurableObjectNamespace,\n  ExecutionContext,\n  ScheduledController,\n} from '@cloudflare/workers-types';\nimport { AemoData } from './AemoDataDurableObject';\n\n/**\n * Typed environment for the data-logger approach.\n */\nexport interface Env {\n  /**\n   * Reference to the AEMO_DATA Durable Object, which stores and manages\n   * the intervals in an embedded SQLite database.\n   */\n  AEMO_DATA: DurableObjectNamespace;\n\n  /**\n   * AEMO API endpoint, also used by the DO for retrieving intervals.\n   */\n  AEMO_API_URL: string;\n\n  /**\n   * JSON string of HTTP headers to pass to the AEMO API fetch calls.\n   */\n  AEMO_API_HEADERS: string;\n}\n\n/**\n * Export the DO class so that Wrangler can identify and deploy it.\n */\nexport { AemoData } from './AemoDataDurableObject';\n\nexport default {\n  /**\n   * Called by Cloudflare on your configured cron schedule. This function locates the DO instance\n   * (by name), then invokes the /sync route to fetch and store data.\n   *\n   * @param controller The scheduled task controller.\n   * @param env        The typed environment containing references and secrets.\n   * @param ctx        The execution context for async tasks.\n   */\n  async scheduled(controller: ScheduledController, env: Env, ctx: ExecutionContext): Promise<void> {\n    try {\n      const id = env.AEMO_DATA.idFromName(\"AEMO_LOGGER\");\n      const stub = env.AEMO_DATA.get(id);\n\n      // Ask the DO to run its sync routine:\n      await stub.fetch(\"https://dummy-url/sync\", { method: \"POST\" });\n    } catch (err) {\n      console.error(\"Data logger scheduled task error:\", err);\n    }\n  },\n\n  /**\n   * Minimal fetch handler. The data ingestion primarily relies on the scheduled handler above.\n   * For local testing, you can run wrangler dev --test-scheduled and\n   * call /__scheduled?cron=*+*+*+*+* to simulate the cron invocation.\n   */\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    return new Response(\n      \"AEMO data logger Worker. Cron triggers handle ingestion.\\n\",\n      { headers: { \"content-type\": \"text/plain\" } }\n    );\n  },\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\n// A middleware has to be a function of type Middleware\nconst scheduled: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\tconst url = new URL(request.url);\n\tif (url.pathname === \"/__scheduled\") {\n\t\tconst cron = url.searchParams.get(\"cron\") ?? \"\";\n\t\tawait middlewareCtx.dispatch(\"scheduled\", { cron });\n\n\t\treturn new Response(\"Ran scheduled event\");\n\t}\n\n\tconst resp = await middlewareCtx.next(request, env);\n\n\t// If you open the `/__scheduled` page in a browser, the browser will automatically make a request to `/favicon.ico`.\n\t// For scheduled Workers _without_ a fetch handler, this will result in a 500 response that clutters the log with unhelpful error messages.\n\t// To avoid this, inject a 404 response to favicon.ico loads on the `/__scheduled` page\n\tif (\n\t\trequest.headers.get(\"referer\")?.endsWith(\"/__scheduled\") &&\n\t\turl.pathname === \"/favicon.ico\" &&\n\t\tresp.status === 500\n\t) {\n\t\treturn new Response(null, { status: 404 });\n\t}\n\n\treturn resp;\n};\n\nexport default scheduled;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/workspaces/costs-this-much/workers/aemo-data-logger/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/usr/local/share/npm-global/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/usr/local/share/npm-global/lib/node_modules/wrangler/templates/middleware/middleware-scheduled.ts\";\nimport * as __MIDDLEWARE_2__ from \"/usr/local/share/npm-global/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/workspaces/costs-this-much/workers/aemo-data-logger/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default,__MIDDLEWARE_2__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/workspaces/costs-this-much/workers/aemo-data-logger/.wrangler/tmp/bundle-NpG2Z4/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/usr/local/share/npm-global/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/workspaces/costs-this-much/workers/aemo-data-logger/.wrangler/tmp/bundle-NpG2Z4/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/workspaces/costs-this-much/workers/aemo-data-logger/.wrangler/tmp/bundle-NpG2Z4/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
